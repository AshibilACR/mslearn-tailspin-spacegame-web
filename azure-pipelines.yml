# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - main

resources:
  repositories:
  - repository: azureSharedTemplates
    type: github
    endpoint: ACRCode-ALZNET
    name: ACRCode/ADOCS-templates
    branch: master

extends:
  template: shared-template.yml@azureSharedTemplates
  parameters:
    buildVersionMajor: 1
    buildVersionMinor: 0
    buildSteps:
      - checkout: self
      - task: NuGetToolInstaller@1
        inputs:
          versionSpec: '6.x'
      - task: DotNetCoreCLI@2
        displayName: Project Restore
        inputs:
          command: 'restore'
          projects: 'ALZNetApp.SiteManagement.Api/**.sln'
          feedsToUse: 'config'
          nugetConfigPath: 'ALZNetApp.SiteManagement.Api/nuget.config'
          externalFeedCredentials: 'ACR Nexus Nuget Host with Credential-ALZNET'
          noCache: true
      - task: DotNetCoreCLI@2
        displayName: Build Project
        inputs:
          command: 'build'
          projects: 'ALZNetApp.SiteManagement.Api/**.sln'
          arguments: '--configuration Release'
      - task: DotNetCoreCLI@2
        displayName: Publish Project
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: 'ALZNetApp.SiteManagement.Api/**.csproj'
          arguments: '-p:PublishReadyToRun=true --framework net6.0 --configuration Release --runtime win-x64 --self-contained false --output $(Build.ArtifactStagingDirectory)/NugetPackage'
          zipAfterPublish: false
          modifyOutputPath: false
      - task: CmdLine@2
        displayName: Create nuget spec file .nuspec
        inputs:
          script: 'nuget.exe spec ACR.AlznetApp.SiteManagement'
          workingDirectory: '$(Build.ArtifactStagingDirectory)/NugetPackage'
      - task: NuGetCommand@2
        displayName: Pack Nuget package
        inputs:
          command: 'pack'
          packagesToPack: '$(Build.ArtifactStagingDirectory)/NugetPackage/*.nuspec'
          packDestination: '$(Build.SourcesDirectory)/nupkg'
          versioningScheme: 'byEnvVar'
          versionEnvVar: 'BUILD_BUILDNUMBER'
      - task: NuGetCommand@2
        inputs:
          command: 'push'
          packagesToPush: '$(Build.SourcesDirectory)/nupkg/*.nupkg;!$(Build.SourcesDirectory)/nupkg/**/*.symbols.nupkg'
          nuGetFeedType: 'external'
          publishFeedCredentials: 'ACR Nexus with ApiKey-ALZNET'
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/NugetPackage'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.Artifactstagingdirectory)/deploymentartifact.$(Build.BuildNumber).zip'
          replaceExistingArchive: true
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.Artifactstagingdirectory)/deploymentartifact.$(Build.BuildNumber).zip'
          artifact: 'deploymentartifact'
          publishLocation: 'pipeline'
      # - task: pipeline-triggerer-task@0
      #   inputs:
      #     adoServiceConnection: 'Azure DevOps API for triggering release from build pipeline-ALZNET'
      #     Project: '44614b60-076f-455a-bc50-b62dc92f5ee8'
      #     PipelineType: 'Release'
      #     Async: true
    buildPoolImage: 'windows-latest'
    securityScanAgentPool: 'Local Agents'
    runCheckMarxScan: true
    runIQScan: true
    CheckmarxServiceConnection: 'ACR Checkmarx-ALZNET'
    CheckmarxProject: 'alznet_app_lambda_sitemanagement'
    CheckmarxCustomPreset: 'ACR Default'
    CheckmarxFullTeamName: 'CxServer\SOC\ACR\All\Dev\Alznet'
    CheckmarxFolderExclusion: 'build,node_modules,public/app-assets,cvs, .svn, .hg , .git, .bzr, bin , obj,  backup, .idea, node_modules'
    NexusServiceConnection: 'ACR Nexus IQ-ALZNET'
    NexusAppId: 'AlznetAppSiteManagement'
    NexusScanStage: 'Build'
    ArtifactsForNexusScan: ''   
    NexusScanTarget: '$(Build.SourcesDirectory)/Nexus/**/**.zip'
    IsCloudProject: false
    InfrastructureAsCodeScanTargetPath: '$(Build.SourcesDirectory)/CloudformationTemplates'